// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum ProductCategory {
  PLANTS
  TOOLS
  POTS
  FERTILIZERS
  SEEDS
  ACCESSORIES
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  phone     String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("users")
}

model Product {
  id               String          @id @default(uuid())
  name             String
  description      String
  category         ProductCategory
  price            Float
  stock            Int
  sku              String          @unique
  images           String[]
  status           ProductStatus   @default(ACTIVE)
  weight           Float?
  height           Float?
  width            Float?
  depth            Float?
  careInstructions String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id             String        @id @default(uuid())
  userId         String
  subtotal       Float
  shippingCost   Float
  totalAmount    Float
  status         OrderStatus   @default(PENDING)
  paymentStatus  PaymentStatus @default(PENDING)
  trackingCode   String?
  notes          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Shipping Address
  shippingStreet       String
  shippingNumber       String
  shippingComplement   String?
  shippingNeighborhood String
  shippingCity         String
  shippingState        String
  shippingZipCode      String
  shippingCountry      String

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String @id @default(uuid())
  orderId     String
  productId   String
  productName String
  quantity    Int
  unitPrice   Float
  totalPrice  Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}